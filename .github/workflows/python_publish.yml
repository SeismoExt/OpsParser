name: Release

on:
  pull_request:
    branches: [ main ]
  create:
    tags:
      - v*
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - uses: astral-sh/setup-uv@v1
        with:
          version: "latest"
      - name: Install dependencies
        run: uv sync -p 3.12
      - name: Build wheels
        run: uv tool run hatch build
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels
          path: dist

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - uses: astral-sh/setup-uv@v1
        with:
          version: "latest"
      - name: Install dependencies
        run: uv sync -p 3.12
      - name: Install test dependencies
        run: uv pip install pytest pytest-cov
      - name: Install package in development mode
        run: uv pip install -e .
      - name: Run tests with pytest and coverage
        run: |
          mkdir -p test-results
          uv tool run pytest tests/ -v --cov=opsparser --cov-report=xml --cov-report=term --junitxml=test-results/junit.xml
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            test-results/
            .coverage
            coverage.xml
          retention-days: 7

  release:
    name: Release
    runs-on: ubuntu-latest
    needs:
      - build
      - test
    if: "startsWith(github.ref, 'refs/tags/')"
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: wheels
          path: dist
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - uses: astral-sh/setup-uv@v1
        with:
          version: "latest"
      - name: Install twine
        run: uv pip install twine
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          uv tool run twine upload --skip-existing dist/*
